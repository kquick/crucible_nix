{ compiler ? "ghc802" }:

let

  addSetupDepends = pkgs.haskell.lib.addSetupDepends or
                    (drv: xs: pkgs.haskell.lib.overrideCabal drv
                             (drv: {
                               setupHaskellDepends = (drv.setupHaskellDepends or []) ++ xs;
                              }));

  addLibrarySystemDepends = pkgs.haskell.lib.addSetupDepends or
                            (drv: xs: pkgs.haskell.lib.overrideCabal drv
                             (drv: {
                               librarySystemDepends = (drv.librarySystemDepends or []) ++ xs;
                              }));

  config = {

    allowUnfree = true;

    packageOverrides = pkgs: rec {

      abc = pkgs.callPackage ./abc.nix {};

      glpk_4_55 = pkgs.callPackage ./glpk_4_55.nix {};

      libpoly = pkgs.callPackage ./libpoly.nix {};

      mathsat5 = pkgs.callPackage ./mathsat5.nix {};

      sally = pkgs.callPackage ./sally.nix {};

      yices = pkgs.callPackage ./yices.nix {
        gmp-static = pkgs.gmp.override { withStatic = true; };
      };

      haskell = pkgs.haskell // {
        packages = pkgs.haskell.packages // {
          "${compiler}" = pkgs.haskell.packages."${compiler}".override {
            overrides = haskellPackagesNew: haskellPackagesOld: rec {
              # Generate the various nix descriptions from cabal files.
              # Regenerate from different sources as needed:
              #
              #  * hackage:
              #    $ cabal2nix cabal://pkgname-version > pkgname.nix
              #
              #  * github:
              #    $ cabal2nix https://github.com/project/repo.git --revision REVNUM > pkgname.nix
              #
              #  * local dir:
              #    $ cabal2nix local/path > pkgname.nix

              # cabal2nix /home/quick/work/Tanager/Split/blt-20170623 > blt.nix
              # cabal2nix https://github.com:GaloisInc/blt.git > blt.nix
              raw_blt = haskellPackagesNew.callPackage ./blt.nix {
                          # the cabal file specifies a dependency on the
                          # blt library, which is a C library that is
                          # built (at `cabal configure` time) and linked
                          # to, so nullify all the nix references that are
                          # generated by cabal2nix.
                          blt = null;
                          # And a specific version of glpk is required.
                          glpk = glpk_4_55;
                        };
              blt = addSetupDepends raw_blt [pkgs.boost.dev];

              crucible = haskellPackagesNew.callPackage ./crucible.nix {};

              crucible-abc = addLibrarySystemDepends
                             (haskellPackagesNew.callPackage ./crucible-abc.nix {})
                             [ abc ];

              crucible-blt = pkgs.haskell.lib.disableSharedExecutables
                             (pkgs.haskell.lib.disableSharedLibraries
                              (haskellPackagesNew.callPackage ./crucible-blt.nix {}));

              crucible-llvm = haskellPackagesNew.callPackage ./crucible-llvm.nix {};

              galois-matlab = haskellPackagesNew.callPackage ./galois-matlab.nix {};

              language-sally = haskellPackagesNew.callPackage ./language-sally.nix {};

              llvm-pretty = haskellPackagesNew.callPackage ./llvm-pretty.nix {};

              llvm-pretty-bc-parser = haskellPackagesNew.callPackage ./llvm-pretty-bc-parser.nix {};

              parameterized-utils = haskellPackagesNew.callPackage ./parameterized-utils.nix {};

              th-abstraction = haskellPackagesNew.callPackage ./th-abstraction-0_1_x.nix {};
            };
          };
        };
      };
    };
  };

  pkgs = import <nixpkgs> { inherit config; };
  
in
  { blt                 = pkgs.haskell.packages.${compiler}.blt;
    crucible            = pkgs.haskell.packages.${compiler}.crucible;
    crucible-abc        = pkgs.haskell.packages.${compiler}.crucible-abc;
    crucible-blt        = pkgs.haskell.packages.${compiler}.crucible-blt;
    crucible-llvm       = pkgs.haskell.packages.${compiler}.crucible-llvm;
    galois-matlab       = pkgs.haskell.packages.${compiler}.galois-matlab;
    language-sally      = pkgs.haskell.packages.${compiler}.language-sally;
    parameterized-utils = pkgs.haskell.packages.${compiler}.parameterized-utils;
    th-abstraction      = pkgs.haskell.packages.${compiler}.th-abstraction;
  }

# Usage:
#   $ nix-build -A blt crucible_project.nix
#   <generates result link in local director>
#
#   $ nix-build --argstr compiler ghc7103 -A blt crucible_project.nix
#   <same as above but with compiler version override>
#
#   $ nix-shell -A crucible crucible_project.nix
#   nix-shell$ <environment with crucible dependencies>
#
#   $ nix-shell -A blt crucible_project.nix
#   nix-shell$ <environment with blt dependencies>
#
#   $ echo "(import $(pwd)/crucible_project.nix {}).blt.env" > blt/dir/shell.nix
#   $ cd blt/dir
#   $ nix-shell
#   nix-shell$ <environment with blt dependencies>
